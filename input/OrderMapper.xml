<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OrderMapper">

    <select id="getOrderDetails" resultType="com.example.dto.OrderDetailDto">
        SELECT 
            o.order_id,
            o.order_date,
            o.total_amount,
            o.shipping_address,
            c.customer_name,
            c.customer_email,
            c.customer_phone,
            oi.order_item_id,
            oi.quantity,
            oi.unit_price,
            p.product_name,
            p.sku,
            cat.category_name,
            s.supplier_name,
            s.supplier_email
        FROM orders o
        INNER JOIN customers c ON o.customer_id = c.customer_id
        INNER JOIN order_items oi ON o.order_id = oi.order_id
        INNER JOIN products p ON oi.product_id = p.product_id
        LEFT JOIN categories cat ON p.category_id = cat.category_id
        LEFT JOIN suppliers s ON p.supplier_id = s.supplier_id
        WHERE o.order_id = #{orderId}
    </select>

    <select id="getInventoryReport" resultType="com.example.dto.InventoryReportDto">
        SELECT 
            p.product_id,
            p.product_name,
            p.sku,
            p.price,
            i.current_stock,
            i.reserved_stock,
            i.reorder_level,
            w.warehouse_name,
            w.warehouse_code,
            w.location as warehouse_location,
            s.supplier_name,
            cat.category_name
        FROM products p
        LEFT JOIN inventory i ON p.product_id = i.product_id
        LEFT JOIN warehouses w ON i.warehouse_id = w.warehouse_id
        INNER JOIN suppliers s ON p.supplier_id = s.supplier_id
        INNER JOIN categories cat ON p.category_id = cat.category_id
        <where>
            <if test="lowStock != null and lowStock">
                AND i.current_stock <= i.reorder_level
            </if>
            <if test="categoryId != null">
                AND cat.category_id = #{categoryId}
            </if>
            <if test="warehouseId != null">
                AND w.warehouse_id = #{warehouseId}
            </if>
        </where>
        ORDER BY p.product_name
    </select>

    <insert id="createOrder" parameterType="com.example.entity.Order">
        INSERT INTO orders (customer_id, order_date, total_amount, shipping_address, status)
        VALUES (#{customerId}, #{orderDate}, #{totalAmount}, #{shippingAddress}, 'pending')
    </insert>

    <insert id="addOrderItem" parameterType="com.example.entity.OrderItem">
        INSERT INTO order_items (order_id, product_id, quantity, unit_price)
        VALUES (#{orderId}, #{productId}, #{quantity}, #{unitPrice})
    </insert>

    <update id="updateInventoryStock">
        UPDATE inventory 
        SET current_stock = current_stock - #{quantity},
            reserved_stock = reserved_stock + #{quantity},
            last_updated = NOW()
        WHERE product_id = #{productId}
          AND warehouse_id = #{warehouseId}
    </update>

    <select id="getTestData" resultType="com.example.dto.InventoryReportDto">
        SELECT 
            p.product_id,
            p.product_name,
            p.sku,
            p.price,
            i.current_stock,
            i.reserved_stock,
            i.reorder_level,
        FROM mmeo_destination p
        LEFT JOIN memo_category ON p.product_id = i.product_id
        <if test="user_id != null ">
            AND i.user_id = p.user_id
        </if>
    </select>

</mapper>